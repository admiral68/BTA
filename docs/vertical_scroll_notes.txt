screen_bytes_per_row*tile_height+tile_width = $B00


#define TWOBLOCKSTEP (((SCREENWIDTH + EXTRAWIDTH) / BLOCKWIDTH) - BLOCKHEIGHT)

(SCREEN_COLUMNS - BLOCKHEIGHT) (22 - 16) = 6

mapx = mapposy & 15;


   if ((mapposy & 15) < 6
   if ((mapposy & 15) < (((SCREENWIDTH + EXTRAWIDTH) / BLOCKWIDTH) - BLOCKHEIGHT))
   {
   	// blit only one block
   	
   	x = (mapposy & 15) * BLOCKWIDTH; (0-5)
   	
   	DrawBlock(x,y,mapx,mapy);
   	
   } else {
   	// blit two blocks
   	
   	mapx = 6 + (mapposy & 15 - 6) * 2;  (6-15)
	
	6->
	
	
   	mapx = ((352 / BLOCKWIDTH) - BLOCKHEIGHT) + (mapposy & 15 - ((352 / BLOCKWIDTH) - BLOCKHEIGHT)) * 2;
   	x = mapx * BLOCKWIDTH;
   	
   	DrawBlock(x,y,mapx,mapy);
   	DrawBlock(x + BLOCKWIDTH,y,mapx + 1,mapy);
   }
;
;   bsr ScrollGetXYPositionDown
;
;   lea DecodedGraphic,a3
;   bsr ScrollGetVTileOffsets
;
;   add.l #screen_bytes_per_row*(screen_height+tile_height),a1            ;+2 because we're scrollin' (Skip first column)
;   move.l a1,v_scroll_screen(a0)
;
;   move.w #$F,v_map_y_position(a0)
;   move.w #$F,v_video_y_position(a0)
;   move.b #2,v_scroll_command(a0);up
;
;   bsr ScrollGetXYPositionUp
;
;   lea DecodedGraphic,a3
;   bsr ScrollGetVTileOffsets
;
;
;   bsr ScrollGetStepAndDelay
;
;   swap d2
;   move.w d1,d2
;   and.w #(tile_height*2)-1,d2

;   cmp.w #1,d2
;   bne .check_zero_split
;   
;   mcgeezer_special
;   add.w #tile_height,d1
;   bra .split
;
;.check_zero_split














;   lea FastData,a0
;   lea Screen,a1                                            ;ptr to first bitplane of image
;
;   move.l a1,v_screen(a0)
;
;   lea 2(a1),a1                                             ;(Skip first column)
;   move.l a1,v_scroll_screen(a0)
;
;   move.w #$160,v_map_x_position(a0)
;   move.w #$160,v_video_x_position(a0)
;   move.b #4,v_scroll_command(a0)
;
;   ;bsr ScrollGetStepAndDelay
;   ;bsr TESTScrollDown                                      ;INPUT:d2,a0 (d1)
;   bsr ScrollGetXYPositionDown
;

;   bsr ScrollGetVTileOffsets
;
;   bsr ScrollIncrementYPosition                             ;INPUT: mapx/y in d3; x/y in d4
;
;   REPT 16
;   bsr ScrollGetStepAndDelay
;   bsr TESTScrollDown                                      ;INPUT:d2,a0 (d1)
;   bsr ScrollGetXYPositionDown
;
;   lea DecodedGraphic,a3
;   bsr ScrollGetVTileOffsets
;
;   bsr ScrollIncrementYPosition                             ;INPUT: mapx/y in d3; x/y in d4
;   ENDR


;    ;sne c_split_stop(a1)                                    ;set y=255 wait if position <= $2C
;   bne .set_FFDF_wait
;.set_nop
;    mcgeezer_special2
;   move.w #$01FE,c_split_stop(a1)
;   rts
;.set_FFDF_wait
;   move.w #$FFDF,c_split_stop(a1)
;    rts

Building off the understanding from the above post... it seems that the scheme should be like this

R: Blit all 18 tiles in the fill column (per 16 pixels of scroll)
L: Same
D: Blit all 22 tiles in the fill row (per 16 pixels of scroll)
U: Same

(corner blocks are denoted by brackets [])

R+D: R->[A];       D->[B]; extra block to blit: [C]
R+U: R->[A] & [C]; U->[D]
D+L: D->[A] & [B]; L->[D]
U+L: L->[B];       U->[C] & [D]

I guess I'm trying to sort the blits in terms of Blitter in Ascending mode... such that all blits go from 
left to right, top to bottom of the visible area.

In that case ...

R:   All blocks fill column (left source)
L:   All blocks fill column (right source)
U:   All blocks fill row (bottom source)
D:   All blocks fill row (top source)
R+D: All blocks fill row (top source);      all blocks fill column (left source) (overlap is [A]--first blit)
R+U: All blocks fill column (left source);  all blocks fill row (bottom source)  (overlap is [C]--last blit)
D+L: All blocks fill row (top source);      all blocks fill column (right source)(overlap is [B]--last blit)
U+L: All blocks fill column (right source); all blocks fill row (bottom source)  (overlap is [D]--first blit)

BLIT ORDER: R->D->U->L
D: Check R (for [A] overlap)--If R, skip [A]
U: Check R (for [C] overlap)--If R, skip [C]
L: Check D (for [B] overlap); Check U (for [D] overlap)--If D, skip [B]. If U, skip [D].

